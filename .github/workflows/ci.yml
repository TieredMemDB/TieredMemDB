name: CI

on: [push, pull_request]

jobs:

  test-tarball:
    runs-on: ubuntu-22.04
    name: Test tarball | Compiler ${{ matrix.env.cc }}
    strategy:
      matrix:
        env:
          - { cc: gcc, cxx: g++}
          - { cc: clang, cxx: clang++}

    steps:

    - name: Checkout repository and submodules
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: recursive

    - id: get-tarball-name
      run: echo "::set-output name=tarball-name::$(git describe --tags --match "[1-9].[0-9].[0-9]*")"

    - name: Install memkind build dependencies
      run: |
          sudo apt-get install libnuma-dev libdaxctl-dev

    - name: Build TieredMemDB
      run: make

    - name: Build tarball
      run: make git-tarball

    - name: Build from tarball
      run: |
          cd ..
          tar -xJf tmdb-redis-${{ steps.get-tarball-name.outputs.tarball-name }}.tar.xz
          cd tmdb-redis-${{ steps.get-tarball-name.outputs.tarball-name }}
          make

    - name: Default tests
      run: make test

    - name: Pmem tests
      run: MEMKIND_DAX_KMEM_NODES=0 ./runtest --pmem-ratio

  test-ubuntu-latest:
    runs-on: ubuntu-20.04
    name: Allocator ${{ matrix.allocator }} | Compiler ${{ matrix.env.cc }}
    strategy:
      matrix:
        env:
          - { cc: gcc, cxx: g++}
          - { cc: clang, cxx: clang++}
        allocator: [jemalloc, libc, memkind]
    steps:

    - name: Checkout repository and submodules
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Install memkind build dependencies
      run: |
          if [ "${{ matrix.allocator }}" == memkind ]; then
            sudo apt install libnuma-dev libdaxctl-dev
          fi

    - name: Install test dependencies
      run: sudo apt install  tcl8.6 tclx

    - name: Build TieredMemDB
      run: make gcov MALLOC=${{ matrix.allocator }}

    - name: Run Tests
      run: |
          if [ "${{ matrix.allocator }}" == memkind ]; then
            MEMKIND_DAX_KMEM_NODES=0 ./runtest --pmem-ratio --clients 1
          fi
          ./runtest --clients 1

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1

  test-sanitizer-address:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: make
        run: make SANITIZER=address REDIS_CFLAGS='-Werror'
      - name: testprep
        run: sudo apt-get install tcl8.6 tclx -y
      - name: test
        run: ./runtest --verbose --tags -slow --dump-logs
      - name: module api test
        run: ./runtest-moduleapi --verbose --dump-logs
